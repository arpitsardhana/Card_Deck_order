# Copyright (c) 2015 All Right Reserved,Arpit Singh(arpitsardhana2008@gmail.com)
# deck is free program: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# deck is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# for terms and conditions see, see <http://www.gnu.org/licenses/>.
===========================================================================
Problem Description:
You are given a deck containing N cards.  While holding the deck:

1. Take the top card off the deck and set it on the table
2. Take the next card off the top and put it on the bottom of the deck
in your hand.
3. Continue steps 1 and 2 until all cards are on the table.  This is a
round.
4. Pick up the deck from the table and repeat steps 1-3 until the deck
is in the original order.

Write a program to determine how many rounds it will take to put a
deck back into the original order.  This will involve creating a data
structure to represent the order of the cards. Do not use an array.
This program should be written in C only. It should take a number of
cards in the deck as a command line argument and write the result to
stdout.
============================================================================

Created By     	     :    Arpit Singh
Date       	     :    18 December 2015
File Type  	     :    README
Summary    	     :    In deck, number of rounds required to reorder cards in their original order is calculated.
			  Shuffling is done by placing a card on table and next card at end of deck.
			  When no cards are left in deck, cards are taken from table and shuffled again till 
			  original order is restored. The program calculates number of rounds required to shuffle back cards 			
			  in original order.Program takes number of cards as input. 

Compiler Instruction :    Makefile is provided which contains make command. To compile, execute,
		          make
			  --It wil create a binary named deck.
			  execute binary as
			  ./deck <card_count>
			  ./deck 52
			  ./deck 5 
		          Program is tested on 64bit machine with GCC version 4.8.4 
			  execute :
			  make clean 
			  --to remove created binary
			  As an output:  No of Rounds and Time taken by program to execute is obtained.



High Level Design   :    To keep track of cards, structure card is created which is the linked list of cards.
			 It consists of card original index and next element.  	 
			 Another structure index_map is used which consists of next and cycle_map. 
			 index_map keep track of mapping of index to its next position in subsequent rounds.
			 Program flow goes as follows:
			 (1) Create linked list of cards based on input number of cards
			 (2) Based on the rules of shuffling, put cards on table deck and at end of deck
			 (3) Now when there are no cards in hand, 1 round has completed
			 (4) Thus , after first round, we use index_mapper to keep track of position of card in
			     subsequent rounds
			 (5) Now, we calculate cycle for every index such that number of rounds required to 
			     reach same index is one cycle for given index
			 (6) Each index that comes in particular cycle will have same cycle length as starting index
			     Thus, all in between index as marked as we donot need to calculate their cycles.
			 (7) On obtaining Cycle, Net rounds is LCM is all cycles obtained
			 (8) LCM is calculated using GCD and implemented standard GCD using standard
		             recursion based on euclidean algorithm
			 (9) LCM is caluculalated subsequently for each new cycle.
			 (10) Number of Rounds is equal to last LCM obtained.
			 (11) Since we used Dynammic Programming by storing index_mapper and cycle_map flag. Each card is visited twice during round calculation.
			 (12) Thus Running time complexity is O(n). Space Complexity is also O(n)

Standard Test Results:   Max value tested is 65535.However larger values also runs in satisfactory time.
                        
			 Card Count |	Rounds                 | Time Taken in secs 
			     1      |     1                    | 0.000187
 			     6      |     6                    | 0.000191 
                             10     |     6                    | 0.000214
			     52     |     510                  | 0.000185
			     313    |     1575169365           | 0.000214
			    1000    |     35814240             | 0.000235
			    52517   |     4685156230085344218  | 0.004685
			    65535   |     65535                | 0.004936

Refrences :
	(1) https://en.wikipedia.org/wiki/Euclidean_algorithm
	(2) http://stackoverflow.com/questions/5248915/execution-time-of-c-program			  
